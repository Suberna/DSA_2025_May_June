### ‚úÖ **Key String Topics for Java Interviews**

---

### 1Ô∏è‚É£ **String Basics**

* Immutable ‚Üí can‚Äôt change after creation.
* Stored in **String pool** (memory optimization).

Example:

```java
String s1 = "hello";
String s2 = "hello";
System.out.println(s1 == s2);  // true ‚Üí same pool object
System.out.println(s1.equals(s2));  // true ‚Üí same content
```

---

### 2Ô∏è‚É£ **String Creation**

* Literal vs `new String()`

Example:

```java
String s1 = "abc";                // in pool
String s2 = new String("abc");    // new heap object
System.out.println(s1 == s2);     // false
System.out.println(s1.equals(s2)); // true
```

---

### 3Ô∏è‚É£ **String Methods**

‚úÖ Common methods:

* `length()`
* `charAt()`
* `substring()`
* `indexOf()`
* `toUpperCase()`, `toLowerCase()`
* `replace()`
* `split()`
* `trim()`

Example:

```java
String s = " hello java ";
System.out.println(s.trim());        // "hello java"
System.out.println(s.substring(1,5));// "hell"
System.out.println(s.replace("java", "world")); // " hello world "
```

---

### 4Ô∏è‚É£ **String Comparison**

* `==` ‚Üí reference equality
* `.equals()` ‚Üí content equality
* `.compareTo()` ‚Üí dictionary order

Example:

```java
String a = "apple";
String b = "apple";
String c = new String("apple");
System.out.println(a == b);       // true
System.out.println(a == c);       // false
System.out.println(a.equals(c));  // true
System.out.println(a.compareTo("banana")); // negative (a < b)
```

---

### 5Ô∏è‚É£ **StringBuilder vs StringBuffer**

* Mutable classes for editing strings.
* StringBuilder ‚Üí faster, non-thread-safe.
* StringBuffer ‚Üí thread-safe, slower.

Example:

```java
StringBuilder sb = new StringBuilder("Hello");
sb.append(" World");
System.out.println(sb.toString()); // "Hello World"
```

---

### 6Ô∏è‚É£ **Reversing a String**

Common interview task.

Example:

```java
String s = "hello";
String reversed = new StringBuilder(s).reverse().toString();
System.out.println(reversed); // "olleh"
```

---

### 7Ô∏è‚É£ **Check Palindrome**

Example:

```java
public static boolean isPalindrome(String s) {
    int i = 0, j = s.length() - 1;
    while (i < j) {
        if (s.charAt(i) != s.charAt(j)) return false;
        i++; j--;
    }
    return true;
}
```

---

### 8Ô∏è‚É£ **Count Character Frequency**

Example:

```java
Map<Character, Integer> freq = new HashMap<>();
for (char c : s.toCharArray()) {
    freq.put(c, freq.getOrDefault(c, 0) + 1);
}
```

---

### 9Ô∏è‚É£ **Remove Duplicates**

Example:

```java
String s = "programming";
StringBuilder sb = new StringBuilder();
Set<Character> seen = new HashSet<>();
for (char c : s.toCharArray()) {
    if (!seen.contains(c)) {
        seen.add(c);
        sb.append(c);
    }
}
System.out.println(sb.toString()); // "progamin"
```

---

### üîü **Anagram Check**

Example:

```java
public static boolean isAnagram(String s1, String s2) {
    char[] a1 = s1.toCharArray();
    char[] a2 = s2.toCharArray();
    Arrays.sort(a1);
    Arrays.sort(a2);
    return Arrays.equals(a1, a2);
}
```

---

---

### ‚úÖ Summary of Topics

‚úî String pool & immutability
‚úî String methods
‚úî Comparisons (`==`, `.equals()`, `.compareTo()`)
‚úî StringBuilder vs StringBuffer
‚úî Reversing / Palindrome
‚úî Frequency count
‚úî Removing duplicates
‚úî Anagram check
‚úî Common patterns like `split()`, `substring()`, `replace()`

---


