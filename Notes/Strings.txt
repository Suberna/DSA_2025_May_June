### ✅ **Key String Topics for Java Interviews**

---

### 1️⃣ **String Basics**

* Immutable → can’t change after creation.
* Stored in **String pool** (memory optimization).

Example:

```java
String s1 = "hello";
String s2 = "hello";
System.out.println(s1 == s2);  // true → same pool object
System.out.println(s1.equals(s2));  // true → same content
```

---

### 2️⃣ **String Creation**

* Literal vs `new String()`

Example:

```java
String s1 = "abc";                // in pool
String s2 = new String("abc");    // new heap object
System.out.println(s1 == s2);     // false
System.out.println(s1.equals(s2)); // true
```

---

### 3️⃣ **String Methods**

✅ Common methods:

* `length()`
* `charAt()`
* `substring()`
* `indexOf()`
* `toUpperCase()`, `toLowerCase()`
* `replace()`
* `split()`
* `trim()`

Example:

```java
String s = " hello java ";
System.out.println(s.trim());        // "hello java"
System.out.println(s.substring(1,5));// "hell"
System.out.println(s.replace("java", "world")); // " hello world "
```

---

### 4️⃣ **String Comparison**

* `==` → reference equality
* `.equals()` → content equality
* `.compareTo()` → dictionary order

Example:

```java
String a = "apple";
String b = "apple";
String c = new String("apple");
System.out.println(a == b);       // true
System.out.println(a == c);       // false
System.out.println(a.equals(c));  // true
System.out.println(a.compareTo("banana")); // negative (a < b)
```

---

### 5️⃣ **StringBuilder vs StringBuffer**

* Mutable classes for editing strings.
* StringBuilder → faster, non-thread-safe.
* StringBuffer → thread-safe, slower.

Example:

```java
StringBuilder sb = new StringBuilder("Hello");
sb.append(" World");
System.out.println(sb.toString()); // "Hello World"
```

---

### 6️⃣ **Reversing a String**

Common interview task.

Example:

```java
String s = "hello";
String reversed = new StringBuilder(s).reverse().toString();
System.out.println(reversed); // "olleh"
```

---

### 7️⃣ **Check Palindrome**

Example:

```java
public static boolean isPalindrome(String s) {
    int i = 0, j = s.length() - 1;
    while (i < j) {
        if (s.charAt(i) != s.charAt(j)) return false;
        i++; j--;
    }
    return true;
}
```

---

### 8️⃣ **Count Character Frequency**

Example:

```java
Map<Character, Integer> freq = new HashMap<>();
for (char c : s.toCharArray()) {
    freq.put(c, freq.getOrDefault(c, 0) + 1);
}
```

---

### 9️⃣ **Remove Duplicates**

Example:

```java
String s = "programming";
StringBuilder sb = new StringBuilder();
Set<Character> seen = new HashSet<>();
for (char c : s.toCharArray()) {
    if (!seen.contains(c)) {
        seen.add(c);
        sb.append(c);
    }
}
System.out.println(sb.toString()); // "progamin"
```

---

### 🔟 **Anagram Check**

Example:

```java
public static boolean isAnagram(String s1, String s2) {
    char[] a1 = s1.toCharArray();
    char[] a2 = s2.toCharArray();
    Arrays.sort(a1);
    Arrays.sort(a2);
    return Arrays.equals(a1, a2);
}
```

---

---

### ✅ Summary of Topics

✔ String pool & immutability
✔ String methods
✔ Comparisons (`==`, `.equals()`, `.compareTo()`)
✔ StringBuilder vs StringBuffer
✔ Reversing / Palindrome
✔ Frequency count
✔ Removing duplicates
✔ Anagram check
✔ Common patterns like `split()`, `substring()`, `replace()`

---

### 🌟 **1️⃣ Substrings, Counting, and Searching**

---

#### ✅ **What is a substring?**

A **substring** is just a part of a string.
For example, in `"hello"`:

* `"he"`, `"ell"`, `"lo"` are substrings.
* It’s like cutting a word into smaller continuous parts.

---

#### 🔍 **Problem: Count how many times a substring appears**

Example:
In the string `"ababab"`, how many times does `"ab"` appear?

👉 It appears **3 times**:

* `"ab"` at positions 0–1
* `"ab"` at positions 2–3
* `"ab"` at positions 4–5

---

### ✅ **Java Code: Count Occurrences**

```java
public class SubstringCount {
    public static int countOccurrences(String str, String sub) {
        int count = 0;           // to keep track of how many times we find it
        int index = 0;           // start searching from index 0

        // keep searching until no more found
        while ((index = str.indexOf(sub, index)) != -1) {
            count++;                      // found one → increase count
            index += sub.length();        // move index forward to avoid overlapping
        }

        return count;
    }

    public static void main(String[] args) {
        String str = "ababab";
        String sub = "ab";
        System.out.println("Occurrences: " + countOccurrences(str, sub));  // Output: 3
    }
}
```

---

### 🧠 **Logic Explanation**

* `str.indexOf(sub, index)` → finds **where** the substring `sub` appears in `str`, starting from `index`.
  It returns **-1** if not found.

* Each time we find it:

  * We increase the count.
  * We move `index` forward by the length of the substring (to avoid overlapping).

---

### ✨ **Simple Example Walkthrough**

* Input: `str = "ababab"`, `sub = "ab"`
* Find at index 0 → count = 1 → move to index 2
* Find at index 2 → count = 2 → move to index 4
* Find at index 4 → count = 3 → move to index 6 (no more)

✅ Final count → **3**

---

---

### 🌟 **2️⃣ Compression Using Run Length Encoding (RLE)**

---

#### ✅ **What is Run Length Encoding?**

It’s a simple **compression** method:
Instead of writing `"aaabbcddd"`, we write:

```
a3b2c1d3
```

Which means:

* 3 a’s → `a3`
* 2 b’s → `b2`
* 1 c  → `c1`
* 3 d’s → `d3`

---

### ✅ **Java Code: RLE Compression**

```java
public class RunLengthEncoding {
    public static String compress(String s) {
        StringBuilder result = new StringBuilder();  // to build compressed string
        int count = 1;  // start count at 1

        for (int i = 1; i < s.length(); i++) {
            if (s.charAt(i) == s.charAt(i - 1)) {
                count++;  // same character → increase count
            } else {
                result.append(s.charAt(i - 1)).append(count);  // add previous character + count
                count = 1;  // reset count for new character
            }
        }

        // Add the last character group
        result.append(s.charAt(s.length() - 1)).append(count);

        return result.toString();
    }

    public static void main(String[] args) {
        String input = "aaabbcddd";
        String compressed = compress(input);
        System.out.println("Compressed: " + compressed);  // Output: a3b2c1d3
    }
}
```

---

### 🧠 **Logic Explanation**

* We **loop** through the string.
* If the current character is the **same** as the previous one, we increase the count.
* If the current character is **different**:

  * We **add** the previous character + count to the result.
  * Reset the count to 1.
* After the loop, we **add the last character group**.

---

### ✨ **Simple Example Walkthrough**

Input: `"aaabbcddd"`

| i | Current | Previous | Count      | Result So Far |
| - | ------- | -------- | ---------- | ------------- |
| 1 | a       | a        | 2          |               |
| 2 | a       | a        | 3          |               |
| 3 | b       | a        | → add `a3` | a3            |
| 4 | b       | b        | 2          | a3            |
| 5 | c       | b        | → add `b2` | a3b2          |
| 6 | d       | c        | → add `c1` | a3b2c1        |
| 7 | d       | d        | 2          | a3b2c1        |
| 8 | d       | d        | 3          | a3b2c1        |

✅ After loop → add `d3`

Final Output → `a3b2c1d3`

---

---

### 🔧 **Functions Used**

| Function/Tool      | What It Does                                   |
| ------------------ | ---------------------------------------------- |
| `StringBuilder`    | Efficiently builds strings without new objects |
| `s.charAt(i)`      | Gets the character at index `i`                |
| `.append()`        | Adds characters/numbers to the result string   |
| `str.indexOf(sub)` | Finds where a substring appears                |

---

## 🌟 **Topic 1: Frequency Maps (Character Count)**

---

### ✅ **What is it?**

We want to **count how many times** each character appears in a string.

Example:

```
Input: "hello"
Counts: h → 1, e → 1, l → 2, o → 1
```

---

### 🧠 **Logic**

* Use a **map** or an **array** to store counts.
* For each character:

  * Increase its count.

---

### 📦 **Java Code (using int array for lowercase a-z)**

```java
public class CharacterCount {
    public static void main(String[] args) {
        String str = "hello";
        int[] count = new int[26];  // only for a-z

        for (char c : str.toCharArray()) {
            count[c - 'a']++;
        }

        for (int i = 0; i < 26; i++) {
            if (count[i] > 0) {
                System.out.println((char)(i + 'a') + " → " + count[i]);
            }
        }
    }
}
```

---

### 🔍 **Explanation**

* `count[c - 'a']` → maps 'a' to index 0, 'b' to 1, ..., 'z' to 25.
* Loop through the string, increase count.
* Finally, print only the nonzero counts.

---

---

## 🌟 **Topic 2: ASCII Tricks (Case Toggle a ↔ A)**

---

### ✅ **What is it?**

We want to **change lowercase to uppercase** or **uppercase to lowercase**
Example:

```
Input: "HeLLo"
Output: "hEllO"
```

---

### 🧠 **Logic**

We use the fact that:

* In ASCII, `'A'` (65) and `'a'` (97) differ by **32**.
* So:

  * To toggle case: `c ^ 32` (XOR with 32).
  * To uppercase: if `'a' ≤ c ≤ 'z'`, `c - 32`.
  * To lowercase: if `'A' ≤ c ≤ 'Z'`, `c + 32`.

---

### 📦 **Java Code (Toggle Case)**

```java
public class CaseToggle {
    public static void main(String[] args) {
        String str = "HeLLo";
        StringBuilder toggled = new StringBuilder();

        for (char c : str.toCharArray()) {
            if (c >= 'A' && c <= 'Z') {
                toggled.append((char)(c + 32));  // uppercase to lowercase
            } else if (c >= 'a' && c <= 'z') {
                toggled.append((char)(c - 32));  // lowercase to uppercase
            } else {
                toggled.append(c);  // leave other chars as-is
            }
        }

        System.out.println("Toggled: " + toggled.toString());
    }
}
```

---

### 🔍 **Explanation**

* `'A'` to `'Z'`: ASCII 65–90 → add 32 → `'a'`–`'z'`
* `'a'` to `'z'`: ASCII 97–122 → subtract 32 → `'A'`–`'Z'`
* We check each character, transform if it’s a letter.

---

---

### ✅ **Summary Table**

| Task                  | Trick                                        |
| --------------------- | -------------------------------------------- |
| Count letters a-z     | `count[c - 'a']++`                           |
| Toggle case           | `c ^ 32` (fast), or add/subtract 32 manually |
| Uppercase → lowercase | if `'A' ≤ c ≤ 'Z'`, `c + 32`                 |
| Lowercase → uppercase | if `'a' ≤ c ≤ 'z'`, `c - 32`                 |

---



